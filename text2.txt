types/index.ts:
export interface User {
  id: number;
  name: string;
  email: string;
  avatar: string | null;
  bio: string | null;
  createdAt: Date;
}

export interface BaseEntity {
  id: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface PaginationParams {
  limit?: number;
  offset?: number;
}

export interface ApiResponse<T> {
  data: T;
  success: boolean;
  message?: string;
}

export interface ApiError {
  message: string;
  code?: string;
  status?: number;
}
types/post.ts:
import { Category } from './category';
import { User } from './index';


export interface Post {
  id: number;
  title: string;
  slug: string;
  content: string;
  excerpt: string | null;
  thumbnail: string | null;
  published: boolean;
  authorId: number;
  createdAt: Date;
  updatedAt: Date;
}

export interface PostWithRelations extends Post {
  author: User;
  postCategories: Array<{
    id: number;
    postId: number;
    categoryId: number;
    category: Category;
  }>;
}

export interface CreatePostInput {
  title: string;
  content: string;
  excerpt?: string | null;
  thumbnail?: string | null;
  published?: boolean;
  categoryIds?: number[];
}

export interface UpdatePostInput {
  id: number;
  title?: string;
  content?: string;
  excerpt?: string | null;
  thumbnail?: string | null;
  published?: boolean;
  categoryIds?: number[];
}

export interface PostFilter {
  published?: boolean;
  categoryId?: number;
  search?: string;
  limit?: number;
  offset?: number;
}

export interface PostPageProps {
  params: Promise<{
    slug: string;
  }>;
}
export interface EditPostPageProps {
  params: Promise<{
    slug: string;  
  }>;
}

export interface PostFormProps {
  post?: {
    id: number;
    title: string;
    slug: string;
    content: string;
    excerpt: string | null;
    thumbnail: string | null;
    published: boolean;
    authorId: number;
    createdAt: Date;
    updatedAt: Date;
    postCategories?: Array<{
      id: number;
      postId: number;
      categoryId: number;
      category: {
        id: number;
        name: string;
        slug: string;
        description: string | null;
      };
    }>;
    author: {
      id: number;
      name: string;
      email: string;
      avatar: string | null;
      bio: string | null;
      createdAt: Date;
    };
  };
  categories: Array<{
    id: number;
    name: string;
    slug: string;
    description: string | null;
    createdAt: Date;
    updatedAt: Date;
  }>;
}

export interface PostTableProps {
    posts: Array<{
        id: number;
        title: string;
        slug: string;
        published: boolean;
        createdAt: Date;
        author: {
            name: string;
        };
        postCategories?: Array<{
            category: {
                name: string;
            };
        }>;
    }>;
}
types/category.ts
export interface Category {
  id: number;
  name: string;
  slug: string;
  description: string | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface CategoryWithPostCount extends Category {
  _count?: {
    postCategories: number;
  };
}

export interface CreateCategoryInput {
  name: string;
  description?: string | null;
}

export interface UpdateCategoryInput {
  id: number;
  name?: string;
  description?: string | null;
}


export interface CategoryFilterProps {
  categories: Category[];
}
export interface CategoryManagerProps {
  categories: Array<{
    id: number;
    name: string;
    slug: string;
    description: string | null;
    createdAt: Date;
  }>;
}

export interface CategoryFormProps {
  category?: {
    id: number;
    name: string;
    slug: string;
    description: string | null;
  };
  onSuccess?: () => void;
}
store/uiStore.ts:
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';

type Theme = 'light' | 'dark' | 'system';

interface UIState {
  theme: Theme;
  sidebarOpen: boolean;
  mounted: boolean;
  
  // Actions
  setTheme: (theme: Theme) => void;
  toggleTheme: () => void;
  toggleSidebar: () => void;
  setSidebarOpen: (open: boolean) => void;
  setMounted: () => void;
}

export const useUIStore = create<UIState>()(
  persist(
    (set, get) => ({
      theme: 'system',
      sidebarOpen: true,
      mounted: false,

      setTheme: (theme) => {
        set({ theme });
        applyTheme(theme);
      },

      toggleTheme: () => {
        const { theme } = get();
        const newTheme = theme === 'light' ? 'dark' : theme === 'dark' ? 'system' : 'light';
        set({ theme: newTheme });
        applyTheme(newTheme);
      },

      toggleSidebar: () => set((state) => ({ sidebarOpen: !state.sidebarOpen })),
      
      setSidebarOpen: (open) => set({ sidebarOpen: open }),
      
      setMounted: () => set({ mounted: true }),
    }),
    {
      name: 'ui-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({ 
        theme: state.theme,
        sidebarOpen: state.sidebarOpen 
      }),
    }
  )
);

// Helper function to apply theme to document
function applyTheme(theme: Theme) {
  if (typeof window === 'undefined') return;

  const root = document.documentElement;
  root.classList.remove('light', 'dark');

  if (theme === 'system') {
    const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    root.classList.add(systemTheme);
  } else {
    root.classList.add(theme);
  }
}

// Initialize theme on mount
if (typeof window !== 'undefined') {
  const store = useUIStore.getState();
  applyTheme(store.theme);
}
store/editorStore.ts:
import { create } from 'zustand';
import { devtools } from 'zustand/middleware';

type PreviewMode = 'split' | 'preview' | 'edit';

interface EditorState {
  content: string;
  previewMode: PreviewMode;
  isDirty: boolean;
  lastSaved: Date | null;

  // Actions
  setContent: (content: string) => void;
  setPreviewMode: (mode: PreviewMode) => void;
  insertMarkdown: (markdown: string, cursorPosition?: number) => void;
  clearContent: () => void;
  markAsSaved: () => void;
  reset: () => void;
}

const initialState = {
  content: '',
  previewMode: 'split' as PreviewMode,
  isDirty: false,
  lastSaved: null,
};

export const useEditorStore = create<EditorState>()(
  devtools(
    (set, get) => ({
      ...initialState,

      setContent: (content) => 
        set({ 
          content, 
          isDirty: content !== get().content 
        }),

      setPreviewMode: (mode) => 
        set({ previewMode: mode }),

      insertMarkdown: (markdown, cursorPosition) => {
        const { content } = get();
        if (cursorPosition !== undefined) {
          const newContent = 
            content.slice(0, cursorPosition) + 
            markdown + 
            content.slice(cursorPosition);
          set({ content: newContent, isDirty: true });
        } else {
          set({ content: content + markdown, isDirty: true });
        }
      },

      clearContent: () => 
        set({ content: '', isDirty: false }),

      markAsSaved: () => 
        set({ isDirty: false, lastSaved: new Date() }),

      reset: () => 
        set(initialState),
    }),
    { name: 'EditorStore' }
  )
);
server/db/schema.ts:
import { pgTable, serial, text, timestamp, boolean, integer, varchar } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  email: text('email').notNull().unique(),
  avatar: text('avatar'),
  bio: text('bio'),
  createdAt: timestamp('created_at').defaultNow().notNull(),
});

export const posts = pgTable('posts', {
  id: serial('id').primaryKey(),
  title: varchar('title', { length: 200 }).notNull(),
  slug: varchar('slug', { length: 250 }).notNull().unique(),
  content: text('content').notNull(),
  excerpt: varchar('excerpt', { length: 500 }),
  thumbnail: text('thumbnail'),
  published: boolean('published').default(false).notNull(),
  authorId: integer('author_id')
    .references(() => users.id, { onDelete: 'cascade' })
    .notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});

export const categories = pgTable('categories', {
  id: serial('id').primaryKey(),
  name: varchar('name', { length: 100 }).notNull(),
  slug: varchar('slug', { length: 150 }).notNull().unique(),
  description: varchar('description', { length: 500 }),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});

export const postCategories = pgTable('post_categories', {
  id: serial('id').primaryKey(),
  postId: integer('post_id')
    .references(() => posts.id, { onDelete: 'cascade' })
    .notNull(),
  categoryId: integer('category_id')
    .references(() => categories.id, { onDelete: 'cascade' })
    .notNull(),
});

export const postsRelations = relations(posts, ({ one, many }) => ({
  author: one(users, {
    fields: [posts.authorId],
    references: [users.id],
  }),
  postCategories: many(postCategories),
}));

export const categoriesRelations = relations(categories, ({ many }) => ({
  postCategories: many(postCategories),
}));

export const postCategoriesRelations = relations(postCategories, ({ one }) => ({
  post: one(posts, {
    fields: [postCategories.postId],
    references: [posts.id],
  }),
  category: one(categories, {
    fields: [postCategories.categoryId],
    references: [categories.id],
  }),
}));

export const usersRelations = relations(users, ({ many }) => ({
  posts: many(posts),
}));
server/api/routers/post.ts:
import { pgTable, serial, text, timestamp, boolean, integer, varchar } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  email: text('email').notNull().unique(),
  avatar: text('avatar'),
  bio: text('bio'),
  createdAt: timestamp('created_at').defaultNow().notNull(),
});

export const posts = pgTable('posts', {
  id: serial('id').primaryKey(),
  title: varchar('title', { length: 200 }).notNull(),
  slug: varchar('slug', { length: 250 }).notNull().unique(),
  content: text('content').notNull(),
  excerpt: varchar('excerpt', { length: 500 }),
  thumbnail: text('thumbnail'),
  published: boolean('published').default(false).notNull(),
  authorId: integer('author_id')
    .references(() => users.id, { onDelete: 'cascade' })
    .notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});

export const categories = pgTable('categories', {
  id: serial('id').primaryKey(),
  name: varchar('name', { length: 100 }).notNull(),
  slug: varchar('slug', { length: 150 }).notNull().unique(),
  description: varchar('description', { length: 500 }),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});

export const postCategories = pgTable('post_categories', {
  id: serial('id').primaryKey(),
  postId: integer('post_id')
    .references(() => posts.id, { onDelete: 'cascade' })
    .notNull(),
  categoryId: integer('category_id')
    .references(() => categories.id, { onDelete: 'cascade' })
    .notNull(),
});

export const postsRelations = relations(posts, ({ one, many }) => ({
  author: one(users, {
    fields: [posts.authorId],
    references: [users.id],
  }),
  postCategories: many(postCategories),
}));

export const categoriesRelations = relations(categories, ({ many }) => ({
  postCategories: many(postCategories),
}));

export const postCategoriesRelations = relations(postCategories, ({ one }) => ({
  post: one(posts, {
    fields: [postCategories.postId],
    references: [posts.id],
  }),
  category: one(categories, {
    fields: [postCategories.categoryId],
    references: [categories.id],
  }),
}));

export const usersRelations = relations(users, ({ many }) => ({
  posts: many(posts),
}));
server/api/routers/category.ts:
import { z } from 'zod';
import { createTRPCRouter, publicProcedure, protectedProcedure } from '../trpc';
import { categories } from '@/server/db/schema';
import { eq, asc } from 'drizzle-orm';
import slugify from 'slugify';
import { TRPCError } from '@trpc/server';

const createCategorySchema = z.object({
  name: z.string().min(1, "Name is required").max(100),
  description: z.string().max(500).nullish(),
});

const updateCategorySchema = z.object({
  id: z.number(),
  name: z.string().min(1).max(100).optional(),
  description: z.string().max(500).nullish(),
});

export const categoryRouter = createTRPCRouter({
  
  getAll: publicProcedure.query(async ({ ctx }) => {
    return await ctx.db.query.categories.findMany({
      orderBy: [asc(categories.name)],
    });
  }),

  
  getBySlug: publicProcedure
    .input(z.object({ slug: z.string() }))
    .query(async ({ ctx, input }) => {
      const category = await ctx.db.query.categories.findFirst({
        where: eq(categories.slug, input.slug),
      });

      if (!category) {
        throw new TRPCError({
          code: 'NOT_FOUND',
          message: 'Category not found',
        });
      }

      return category;
    }),

 
  create: protectedProcedure
    .input(createCategorySchema)
    .mutation(async ({ ctx, input }) => {
      try {
       
        let slug = slugify(input.name, { lower: true, strict: true });
        const existingCategory = await ctx.db.query.categories.findFirst({
          where: eq(categories.slug, slug),
        });

        if (existingCategory) {
          slug = `${slug}-${Date.now()}`;
        }

        const [newCategory] = await ctx.db
          .insert(categories)
          .values({
            name: input.name,
            description: input.description ?? null,
            slug,
          })
          .returning();

        return newCategory;
      } catch (error) {
        console.error('Error creating category:', error);
        throw new TRPCError({
          code: 'INTERNAL_SERVER_ERROR',
          message: 'Failed to create category',
          cause: error,
        });
      }
    }),

 
  update: protectedProcedure
    .input(updateCategorySchema)
    .mutation(async ({ ctx, input }) => {
      try {
        const { id, ...updateData } = input;

        const existingCategory = await ctx.db.query.categories.findFirst({
          where: eq(categories.id, id),
        });

        if (!existingCategory) {
          throw new TRPCError({
            code: 'NOT_FOUND',
            message: 'Category not found',
          });
        }

      
        const updateFields: Partial<typeof categories.$inferInsert> = {
          updatedAt: new Date(),
        };

        if (updateData.name !== undefined) {
          updateFields.name = updateData.name;
          updateFields.slug = slugify(updateData.name, { lower: true, strict: true });
        }
        if (updateData.description !== undefined) {
          updateFields.description = updateData.description ?? null;
        }

        const [updatedCategory] = await ctx.db
          .update(categories)
          .set(updateFields)
          .where(eq(categories.id, id))
          .returning();

        return updatedCategory;
      } catch (error) {
        if (error instanceof TRPCError) throw error;
        console.error('Error updating category:', error);
        throw new TRPCError({
          code: 'INTERNAL_SERVER_ERROR',
          message: 'Failed to update category',
          cause: error,
        });
      }
    }),

 
  delete: protectedProcedure
    .input(z.object({ id: z.number() }))
    .mutation(async ({ ctx, input }) => {
      const existingCategory = await ctx.db.query.categories.findFirst({
        where: eq(categories.id, input.id),
      });

      if (!existingCategory) {
        throw new TRPCError({
          code: 'NOT_FOUND',
          message: 'Category not found',
        });
      }

      await ctx.db.delete(categories).where(eq(categories.id, input.id));

      return { success: true };
    }),
});

lib/constants.ts:
import { Eye, FileText, FolderOpen, LayoutDashboard } from "lucide-react";

// Dummy users for seeding (without id - will be generated by DB)
export const DUMMY_USERS_FOR_SEED = [
  {
    name: 'John Doe',
    email: 'john@example.com',
    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=John',
    bio: 'Full-stack developer and tech enthusiast. Love building modern web applications.',
  },
  {
    name: 'Jane Smith',
    email: 'jane@example.com',
    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Jane',
    bio: 'UI/UX designer passionate about creating beautiful user experiences.',
  },
  {
    name: 'Mike Johnson',
    email: 'mike@example.com',
    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=Mike',
    bio: 'Entrepreneur and business strategist. Helping startups scale.',
  },
];

// Simulated current user with ID (for tRPC context)
export const CURRENT_USER = {
  id: 1,
  name: 'John Doe',
  email: 'john@example.com',
  avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=John',
  bio: 'Full-stack developer and tech enthusiast. Love building modern web applications.',
};

// User type for TypeScript
export type User = {
  id: number;
  name: string;
  email: string;
  avatar?: string;
  bio?: string;
};

export const SITE_CONFIG = {
  name: 'TechBlog',
  description: 'A modern blogging platform for tech enthusiasts',
  url: process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000',
};

export const POSTS_PER_PAGE = 9;
export const MAX_CONTENT_LENGTH = 50000;
export const MAX_TITLE_LENGTH = 200;


export const sidebarItems = [
  {
    title: 'Dashboard',
    href: '/dashboard',
    icon: LayoutDashboard,
  },
  {
    title: 'Posts',
    href: '/dashboard/posts',
    icon: FileText,
  },
  {
    title: 'Categories',
    href: '/dashboard/categories',
    icon: FolderOpen,
  },
  {
    title: 'View Blog',
    href: '/blog',
    icon: Eye,
  },
];
lib/trpc/server.ts:
import { appRouter } from '@/server/api/root';
import { createTRPCContext } from '@/server/api/trpc';
import { headers } from 'next/headers';

export const createServerTRPC = async () => {
  return appRouter.createCaller(
    await createTRPCContext({
      headers: await headers(),
    })
  );
};

export const trpc = {
  post: {
    getAll: async (input: Parameters<Awaited<ReturnType<typeof createServerTRPC>>['post']['getAll']>[0]) => {
      const caller = await createServerTRPC();
      return caller.post.getAll(input);
    },
    getFeatured: async (input: Parameters<Awaited<ReturnType<typeof createServerTRPC>>['post']['getFeatured']>[0]) => {
      const caller = await createServerTRPC();
      return caller.post.getFeatured(input);
    },
    getBySlug: async (input: Parameters<Awaited<ReturnType<typeof createServerTRPC>>['post']['getBySlug']>[0]) => {
      const caller = await createServerTRPC();
      return caller.post.getBySlug(input);
    },
    getById: async (input: Parameters<Awaited<ReturnType<typeof createServerTRPC>>['post']['getById']>[0]) => {
      const caller = await createServerTRPC();
      return caller.post.getById(input);
    },
  },
  category: {
    getAll: async () => {
      const caller = await createServerTRPC();
      return caller.category.getAll();
    },
    getBySlug: async (input: Parameters<Awaited<ReturnType<typeof createServerTRPC>>['category']['getBySlug']>[0]) => {
      const caller = await createServerTRPC();
      return caller.category.getBySlug(input);
    },
  },
};
hooks/use-toast:
import * as React from "react"

type ToastActionElement = React.ReactElement<any>


export interface Toast {
  id: string
  title?: string
  description?: string
  action?: ToastActionElement
  variant?: 'default' | 'destructive'
}

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = Toast & {
  id: string
  title?: string
  description?: string
  action?: ToastActionElement
    open?: boolean                         
  onOpenChange?: (open: boolean) => void 
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}



function toast({ ...props }: Omit<ToasterToast, "id">) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
hooks/use-mounted.tsx:
'use client';

import { useEffect, useState } from 'react';

export function useMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  return mounted;
}
config/site.ts:
'use client';

import { useEffect, useState } from 'react';

export function useMounted() {
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  return mounted;
}
components/providers/ClientUIWrapper.tsx:
'use client';

import { ReactNode } from 'react';
import { Toaster } from '../ui/sonner';


export function ClientUIWrapper({ children }: { children: ReactNode }) {
  return (
    <>
      {children}
      <Toaster />
    </>
  );
}
components/layout/ThemeToggle.tsx:
'use client';

import { Moon, Sun, Monitor } from 'lucide-react';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useUIStore } from '@/store/uiStore';
import { useMounted } from '@/hooks/use-mounted';
;

export function ThemeToggle() {
  const { theme, setTheme } = useUIStore();
  const mounted = useMounted();

  if (!mounted) {
    return (
      <Button variant="ghost" size="icon" disabled>
        <Sun className="h-5 w-5" />
      </Button>
    );
  }

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon" aria-label="Toggle theme">
          {theme === 'light' && <Sun className="h-5 w-5" />}
          {theme === 'dark' && <Moon className="h-5 w-5" />}
          {theme === 'system' && <Monitor className="h-5 w-5" />}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>
          <Sun className="mr-2 h-4 w-4" />
          <span>Light</span>
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>
          <Moon className="mr-2 h-4 w-4" />
          <span>Dark</span>
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>
          <Monitor className="mr-2 h-4 w-4" />
          <span>System</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}
components/layout/Navigation.tsx:
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { cn } from '@/lib/utils';

interface NavItem {
  label: string;
  href: string;
}

const navItems: NavItem[] = [
  { label: 'Home', href: '/' },
  { label: 'Blog', href: '/blog' },
  { label: 'Dashboard', href: '/dashboard' },
];

export function Navigation() {
  const pathname = usePathname();

  return (
    <nav className="flex items-center gap-6">
      {navItems.map((item) => (
        <Link
          key={item.href}
          href={item.href}
          className={cn(
            'text-sm font-medium transition-colors hover:text-primary',
            pathname === item.href
              ? 'text-primary'
              : 'text-muted-foreground'
          )}
        >
          {item.label}
        </Link>
      ))}
    </nav>
  );
}
components/layout/Header.tsx:
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { ThemeToggle } from './ThemeToggle';
import { Menu, X } from 'lucide-react';
import { cn } from '@/lib/utils';
import { useState } from 'react';

const navItems = [
  { label: 'Home', href: '/' },
  { label: 'Blog', href: '/blog' },
  { label: 'Dashboard', href: '/dashboard' },
];

export function Header() {
  const pathname = usePathname();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between px-4">
        {/* Logo */}
        <Link href="/" className="flex items-center space-x-2">
          <span className="text-xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
            Nexus
          </span>
        </Link>

        {/* Desktop Navigation */}
        <nav className="hidden md:flex items-center gap-6">
          {navItems.map((item) => (
            <Link
              key={item.href}
              href={item.href}
              className={cn(
                'text-sm font-medium transition-colors hover:text-primary',
                pathname === item.href
                  ? 'text-primary'
                  : 'text-muted-foreground'
              )}
            >
              {item.label}
            </Link>
          ))}
        </nav>

        {/* Actions */}
        <div className="flex items-center gap-2">
          <ThemeToggle />
          
          <Button
            variant="ghost"
            size="icon"
            className="md:hidden"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            aria-label="Toggle menu"
          >
            {mobileMenuOpen ? (
              <X className="h-5 w-5" />
            ) : (
              <Menu className="h-5 w-5" />
            )}
          </Button>
        </div>
      </div>

      {/* Mobile Navigation */}
      {mobileMenuOpen && (
        <div className="md:hidden border-t">
          <nav className="container flex flex-col space-y-3 px-4 py-4">
            {navItems.map((item) => (
              <Link
                key={item.href}
                href={item.href}
                onClick={() => setMobileMenuOpen(false)}
                className={cn(
                  'text-sm font-medium transition-colors hover:text-primary px-2 py-1',
                  pathname === item.href
                    ? 'text-primary'
                    : 'text-muted-foreground'
                )}
              >
                {item.label}
              </Link>
            ))}
          </nav>
        </div>
      )}
    </header>
  );
}
components/layout/Footer.tsx:
import Link from 'next/link';
import { Github, Twitter, Linkedin } from 'lucide-react';

export function Footer() {
  return (
    <footer className="border-t bg-background">
      <div className="container px-4 py-12">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div className="space-y-3">
            <h3 className="text-lg font-bold">Nexus</h3>
            <p className="text-sm text-muted-foreground">
              A modern blogging platform built with Next.js and tRPC.
            </p>
          </div>

          <div>
            <h4 className="text-sm font-semibold mb-3">Navigation</h4>
            <ul className="space-y-2 text-sm text-muted-foreground">
              <li>
                <Link href="/" className="hover:text-primary transition-colors">
                  Home
                </Link>
              </li>
              <li>
                <Link href="/blog" className="hover:text-primary transition-colors">
                  Blog
                </Link>
              </li>
              <li>
                <Link href="/dashboard" className="hover:text-primary transition-colors">
                  Dashboard
                </Link>
              </li>
            </ul>
          </div>

          <div>
            <h4 className="text-sm font-semibold mb-3">Resources</h4>
            <ul className="space-y-2 text-sm text-muted-foreground">
              <li>
                <a href="#" className="hover:text-primary transition-colors">
                  Documentation
                </a>
              </li>
              <li>
                <a href="#" className="hover:text-primary transition-colors">
                  API Reference
                </a>
              </li>
              <li>
                <a href="#" className="hover:text-primary transition-colors">
                  Support
                </a>
              </li>
            </ul>
          </div>

          <div>
            <h4 className="text-sm font-semibold mb-3">Connect</h4>
            <div className="flex gap-3">
              <a href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Github className="w-5 h-5" />
              </a>
              <a href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Twitter className="w-5 h-5" />
              </a>
              <a href="#" className="text-muted-foreground hover:text-primary transition-colors">
                <Linkedin className="w-5 h-5" />
              </a>
            </div>
          </div>
        </div>

        <div className="mt-8 pt-8 border-t text-center text-sm text-muted-foreground">
          <p>&copy; {new Date().getFullYear()} Nexus. All rights reserved.</p>
        </div>
      </div>
    </footer>
  );
}
components/editor/MarkdownPreview.tsx:
'use client';

import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Card } from '@/components/ui/card';

interface MarkdownPreviewProps {
  content: string;
}

export function MarkdownPreview({ content }: MarkdownPreviewProps) {
  if (!content) {
    return (
      <Card className="p-8">
        <div className="text-center text-muted-foreground">
          <p>Preview will appear here...</p>
          <p className="text-sm mt-2">Start writing to see the live preview</p>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-8">
      <div className="prose prose-lg dark:prose-invert max-w-none">
        <ReactMarkdown remarkPlugins={[remarkGfm]}>
          {content}
        </ReactMarkdown>
      </div>
    </Card>
  );
}
components/editor/MarkdownEditor.tsx:
'use client';

import { useCallback } from 'react';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { 
  Bold, 
  Italic, 
  List, 
  ListOrdered, 
  Link as LinkIcon, 
  Image as ImageIcon,
  Code,
  Heading1,
  Heading2,
  Quote
} from 'lucide-react';
import { useEditorStore } from '@/store/editorStore';

interface MarkdownEditorProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
}

export function MarkdownEditor({ value, onChange, placeholder }: MarkdownEditorProps) {
  const { insertMarkdown } = useEditorStore();

  const handleInsert = useCallback((markdown: string, cursorOffset: number = 0) => {
    const textarea = document.querySelector('textarea') as HTMLTextAreaElement;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = value.substring(start, end);
    
    let newText: string;
    let newCursorPos: number;

    if (selectedText) {
      // Wrap selected text
      newText = value.substring(0, start) + markdown.replace('text', selectedText) + value.substring(end);
      newCursorPos = start + markdown.indexOf('text') + selectedText.length;
    } else {
      // Insert at cursor
      newText = value.substring(0, start) + markdown + value.substring(end);
      newCursorPos = start + markdown.length + cursorOffset;
    }

    onChange(newText);
    
    // Restore cursor position
    setTimeout(() => {
      textarea.focus();
      textarea.setSelectionRange(newCursorPos, newCursorPos);
    }, 0);
  }, [value, onChange]);

  const toolbarButtons = [
    { icon: Heading1, label: 'H1', markdown: '# text', offset: -4 },
    { icon: Heading2, label: 'H2', markdown: '## text', offset: -4 },
    { icon: Bold, label: 'Bold', markdown: '**text**', offset: -2 },
    { icon: Italic, label: 'Italic', markdown: '*text*', offset: -1 },
    { icon: Code, label: 'Code', markdown: '`text`', offset: -1 },
    { icon: Quote, label: 'Quote', markdown: '> text', offset: -4 },
    { icon: List, label: 'List', markdown: '- text', offset: -4 },
    { icon: ListOrdered, label: 'Ordered List', markdown: '1. text', offset: -4 },
    { icon: LinkIcon, label: 'Link', markdown: '[text](url)', offset: -1 },
    { icon: ImageIcon, label: 'Image', markdown: '![alt](url)', offset: -1 },
  ];

  return (
    <div className="space-y-2">
      <div className="flex flex-wrap gap-1 p-2 border rounded-lg bg-secondary/50">
        {toolbarButtons.map((button) => {
          const Icon = button.icon;
          return (
            <Button
              key={button.label}
              type="button"
              variant="ghost"
              size="sm"
              onClick={() => handleInsert(button.markdown, button.offset)}
              title={button.label}
            >
              <Icon className="w-4 h-4" />
            </Button>
          );
        })}
      </div>

      <Textarea
        value={value}
        onChange={(e) => onChange(e.target.value)}
        placeholder={placeholder || 'Write your content in markdown...'}
        className="min-h-[500px] font-mono text-sm"
      />

      <div className="text-xs text-muted-foreground">
        Supports Markdown. Use the toolbar for quick formatting.
      </div>
    </div>
  );
}
components/dashboard/PostTable.tsx:
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { trpc } from '@/lib/trpc/client';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { useToast } from '@/hooks/use-toast';
import { Edit, Trash2, Eye, EyeOff } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { PostTableProps } from '@/types/post';


export function PostTable({ posts }: PostTableProps) {
    const router = useRouter();
    const { toast } = useToast();
    const [deleteId, setDeleteId] = useState<number | null>(null);

    const deleteMutation = trpc.post.delete.useMutation({
        onSuccess: () => {
            toast({
                title: 'Success',
                description: 'Post deleted successfully',
            });
            router.refresh();
            setDeleteId(null);
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message,
                variant: 'destructive',
            });
        },
    });

    const togglePublishMutation = trpc.post.togglePublish.useMutation({
        onSuccess: () => {
            toast({
                title: 'Success',
                description: 'Post status updated',
            });
            router.refresh();
        },
        onError: (error) => {
            toast({
                title: 'Error',
                description: error.message,
                variant: 'destructive',
            });
        },
    });

    if (posts.length === 0) {
        return (
            <div className="text-center py-12 border rounded-lg">
                <p className="text-muted-foreground">No posts yet. Create your first post!</p>
            </div>
        );
    }

    return (
        <>
            <div className="rounded-lg border">
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Title</TableHead>
                            <TableHead>Author</TableHead>
                            <TableHead>Categories</TableHead>
                            <TableHead>Status</TableHead>
                            <TableHead>Created</TableHead>
                            <TableHead className="text-right">Actions</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {posts.map((post) => (
                            <TableRow key={post.id}>
                                <TableCell className="font-medium max-w-xs truncate">
                                    {post.title}
                                </TableCell>
                                <TableCell>{post.author.name}</TableCell>
                                <TableCell>
                                    <div className="flex gap-1 flex-wrap">
                                        {post.postCategories?.slice(0, 2).map((pc) => (
                                            <Badge key={pc.category.name} variant="outline" className="text-xs">
                                                {pc.category.name}
                                            </Badge>
                                        ))}
                                        {(post.postCategories?.length ?? 0) > 2 && (
                                            <Badge variant="outline" className="text-xs">
                                                +{(post.postCategories?.length ?? 0) - 2}
                                            </Badge>
                                        )}
                                    </div>
                                </TableCell>
                                <TableCell>
                                    <Badge variant={post.published ? 'default' : 'secondary'}>
                                        {post.published ? 'Published' : 'Draft'}
                                    </Badge>
                                </TableCell>
                                <TableCell className="text-muted-foreground text-sm">
                                    {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
                                </TableCell>
                                <TableCell className="text-right">
                                    <div className="flex justify-end gap-2">
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => togglePublishMutation.mutate({ id: post.id })}
                                            disabled={togglePublishMutation.isPending}
                                        >
                                            {post.published ? (
                                                <EyeOff className="w-4 h-4" />
                                            ) : (
                                                <Eye className="w-4 h-4" />
                                            )}
                                        </Button>
                                        <Button variant="ghost" size="icon" asChild>
                                            <Link href={`/dashboard/posts/${post.slug}/edit`}>                         <Edit className="w-4 h-4" />
                                            </Link>
                                        </Button>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => setDeleteId(post.id)}
                                        >
                                            <Trash2 className="w-4 h-4 text-destructive" />
                                        </Button>
                                    </div>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </div>

            <AlertDialog open={deleteId !== null} onOpenChange={() => setDeleteId(null)}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                        <AlertDialogDescription>
                            This action cannot be undone. This will permanently delete the post.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction
                            onClick={() => deleteId && deleteMutation.mutate({ id: deleteId })}
                            className="bg-destructive hover:bg-destructive/90"
                        >
                            Delete
                        </AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        </>
    );
}
components/dashboard/PostForm.tsx:
'use client';

import { useEffect, useRef, useState, useTransition } from 'react';
import { useRouter } from 'next/navigation';
import Image from 'next/image';
import { Loader2, Upload, X, Save, Eye } from 'lucide-react';
import { trpc } from '@/lib/trpc/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Card, CardContent } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { MarkdownEditor } from '@/components/editor/MarkdownEditor';
import { MarkdownPreview } from '@/components/editor/MarkdownPreview';
import { UploadButton } from '@/lib/uploadthing'; // ✅ ensure this re-exports from @uploadthing/react
import { PostFormProps } from '@/types/post';
import { useEditorStore } from '@/store/editorStore';

export function PostForm({ post, categories }: PostFormProps) {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();

  const { content, setContent } = useEditorStore();
  const isInitialized = useRef(false);

  const [title, setTitle] = useState(post?.title || '');
  const [excerpt, setExcerpt] = useState(post?.excerpt || '');
  const [thumbnail, setThumbnail] = useState(post?.thumbnail || '');
  const [published, setPublished] = useState(post?.published || false);
  const [selectedCategories, setSelectedCategories] = useState<number[]>(
    post?.postCategories?.map((pc) => pc.categoryId) || []
  );

  const createPost = trpc.post.create.useMutation();
  const updatePost = trpc.post.update.useMutation();

  // Initialize editor content only once
  useEffect(() => {
    if (post?.content && !isInitialized.current) {
      setContent(post.content);
      isInitialized.current = true;
    }
  }, [post?.content]);

  const toggleCategory = (categoryId: number) => {
    setSelectedCategories((prev) =>
      prev.includes(categoryId)
        ? prev.filter((id) => id !== categoryId)
        : [...prev, categoryId]
    );
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const data = {
      title,
      content,
      excerpt: excerpt || null,
      thumbnail: thumbnail || null,
      published,
      categoryIds: selectedCategories,
    };

    startTransition(async () => {
      try {
        if (post) {
          await updatePost.mutateAsync({ id: post.id, ...data });
        } else {
          await createPost.mutateAsync(data);
        }
        router.push('/dashboard/posts');
        router.refresh();
      } catch (error) {
        console.error('Error saving post:', error);
      }
    });
  };

  const isLoading = isPending || createPost.isPending || updatePost.isPending;
  const error = createPost.error || updatePost.error;

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error.message}</AlertDescription>
        </Alert>
      )}

      <div className="grid gap-6 lg:grid-cols-3">
        {/* Left Column - Editor */}
        <div className="lg:col-span-2 space-y-6">
          {/* Title */}
          <div className="space-y-2">
            <Label htmlFor="title">Title *</Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter an engaging title..."
              required
              maxLength={200}
              disabled={isLoading}
              className="text-lg font-semibold"
            />
            <p className="text-xs text-muted-foreground">{title.length}/200</p>
          </div>

          {/* Excerpt */}
          <div className="space-y-2">
            <Label htmlFor="excerpt">Excerpt</Label>
            <Input
              id="excerpt"
              value={excerpt}
              onChange={(e) => setExcerpt(e.target.value)}
              placeholder="Brief summary (shown in cards)..."
              maxLength={200}
              disabled={isLoading}
            />
            <p className="text-xs text-muted-foreground">{excerpt.length}/200</p>
          </div>

          {/* Markdown Editor */}
          <div className="space-y-2">
            <Label>Content *</Label>
            <Tabs defaultValue="edit" className="w-full">
              <TabsList className="grid w-full max-w-md grid-cols-2">
                <TabsTrigger value="edit">
                  <Upload className="w-4 h-4 mr-2" /> Edit
                </TabsTrigger>
                <TabsTrigger value="preview">
                  <Eye className="w-4 h-4 mr-2" /> Preview
                </TabsTrigger>
              </TabsList>

              <TabsContent value="edit" className="mt-4">
                <MarkdownEditor
                  value={content}
                  onChange={setContent}
                  placeholder="Write your content in markdown..."
                />
              </TabsContent>

              <TabsContent value="preview" className="mt-4">
                <MarkdownPreview content={content} />
              </TabsContent>
            </Tabs>
          </div>
        </div>

        {/* Right Column - Settings */}
        <div className="space-y-6">
          {/* Publish */}
          <Card>
            <CardContent className="pt-6 space-y-4">
              <div className="flex items-center justify-between">
                <Label htmlFor="published">Publish Status</Label>
                <Checkbox
                  id="published"
                  checked={published}
                  onCheckedChange={(checked) =>
                    setPublished(!!checked)
                  }
                  disabled={isLoading}
                />
              </div>
              <p className="text-xs text-muted-foreground">
                {published
                  ? 'Post will be visible publicly'
                  : 'Saved as draft'}
              </p>
            </CardContent>
          </Card>

          {/* Thumbnail */}
          <Card>
            <CardContent className="pt-6 space-y-4">
              <Label>Thumbnail Image</Label>
              {thumbnail ? (
                <div className="relative aspect-video rounded-lg overflow-hidden border group">
                  <Image
                    src={thumbnail}
                    alt="Thumbnail"
                    fill
                    className="object-cover"
                  />
                  <div className="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 flex items-center justify-center transition">
                    <Button
                      type="button"
                      variant="destructive"
                      size="sm"
                      onClick={() => setThumbnail('')}
                      disabled={isLoading}
                    >
                      <X className="w-4 h-4 mr-2" /> Remove
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="border-2 border-dashed rounded-lg p-6 text-center space-y-3">
                  <Upload className="w-8 h-8 mx-auto text-muted-foreground" />
                  <UploadButton
                    endpoint="imageUploader"
                    onClientUploadComplete={(res) => {
                      if (res?.[0]?.url) setThumbnail(res[0].url);
                    }}
                    onUploadError={(err) =>
                      alert(`Upload failed: ${err.message}`)
                    }
                  />
                  <p className="text-xs text-muted-foreground">
                    Recommended: 1200×630px
                  </p>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Categories */}
          {categories.length > 0 && (
            <Card>
              <CardContent className="pt-6 space-y-4">
                <Label>Categories</Label>
                <div className="space-y-2 max-h-64 overflow-y-auto">
                  {categories.map((cat) => (
                    <div
                      key={cat.id}
                      className="flex items-center space-x-2 p-2 rounded-lg hover:bg-accent cursor-pointer"
                      
                    >
                      <Checkbox
                        checked={selectedCategories.includes(cat.id)}
                        onCheckedChange={() => toggleCategory(cat.id)}
                        disabled={isLoading}
                      />
                      <Label className="flex-1 cursor-pointer">
                        {cat.name}
                      </Label>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Actions */}
          <div className="flex flex-col gap-2">
            <Button type="submit" disabled={isLoading} className="w-full">
              {isLoading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
              <Save className="w-4 h-4 mr-2" />
              {post ? 'Update Post' : 'Create Post'}
            </Button>

            <Button
              type="button"
              variant="outline"
              onClick={() => router.back()}
              disabled={isLoading}
              className="w-full"
            >
              Cancel
            </Button>
          </div>
        </div>
      </div>
    </form>
  );
}
components/dashboard/DashboardSidebar.tsx:
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { 
  LayoutDashboard, 
  FileText, 
  FolderOpen, 
  Eye,
  PanelLeftClose,
  PanelLeftOpen 
} from 'lucide-react';
import { useUIStore } from '@/store/uiStore';

const sidebarItems = [
  {
    title: 'Overview',
    href: '/dashboard',
    icon: LayoutDashboard,
  },
  {
    title: 'Posts',
    href: '/dashboard/posts',
    icon: FileText,
  },
  {
    title: 'Categories',
    href: '/dashboard/categories',
    icon: FolderOpen,
  },
  {
    title: 'View Blog',
    href: '/blog',
    icon: Eye,
  },
];

export function DashboardSidebar() {
  const pathname = usePathname();
  const { sidebarOpen, toggleSidebar } = useUIStore();

  return (
    <>
      {/* Overlay for mobile */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 z-40 bg-background/80 backdrop-blur-sm lg:hidden"
          onClick={toggleSidebar}
        />
      )}

      {/* Sidebar */}
      <aside
        className={cn(
          'fixed left-0 top-0 z-50 h-screen w-64 border-r bg-background transition-transform duration-300 lg:translate-x-0',
          sidebarOpen ? 'translate-x-0' : '-translate-x-full'
        )}
      >
        <div className="flex h-full flex-col">
          {/* Header */}
          <div className="flex h-16 items-center justify-between border-b px-6">
            <Link href="/dashboard" className="flex items-center space-x-2">
              <div className="h-8 w-8 rounded-lg bg-primary flex items-center justify-center">
                <LayoutDashboard className="h-5 w-5 text-primary-foreground" />
              </div>
              <span className="font-bold">Dashboard</span>
            </Link>
            <Button
              variant="ghost"
              size="icon"
              onClick={toggleSidebar}
              className="lg:hidden"
            >
              <PanelLeftClose className="h-5 w-5" />
            </Button>
          </div>

          {/* Navigation */}
          <nav className="flex-1 space-y-1 px-3 py-4">
            {sidebarItems.map((item) => {
              const Icon = item.icon;
              const isActive =
                pathname === item.href ||
                (item.href !== '/dashboard' && pathname.startsWith(item.href));

              return (
                <Link
                  key={item.href}
                  href={item.href}
                  onClick={() => {
                    // Close sidebar on mobile after navigation
                    if (window.innerWidth < 1024) {
                      toggleSidebar();
                    }
                  }}
                  className={cn(
                    'flex items-center gap-3 rounded-lg px-3 py-2 text-sm font-medium transition-all hover:bg-accent',
                    isActive
                      ? 'bg-primary text-primary-foreground hover:bg-primary/90'
                      : 'text-muted-foreground'
                  )}
                >
                  <Icon className="h-5 w-5" />
                  {item.title}
                </Link>
              );
            })}
          </nav>

          {/* Footer */}
          <div className="border-t p-4">
            <p className="text-xs text-muted-foreground">
              Nexus Dashboard v1.0
            </p>
          </div>
        </div>
      </aside>

      {/* Toggle button for desktop */}
      <Button
        variant="outline"
        size="icon"
        onClick={toggleSidebar}
        className="fixed bottom-4 left-4 z-40 hidden lg:flex"
      >
        {sidebarOpen ? (
          <PanelLeftClose className="h-5 w-5" />
        ) : (
          <PanelLeftOpen className="h-5 w-5" />
        )}
      </Button>
    </>
  );
}
components/dashboard/CategoryManager.tsx:
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { trpc } from '@/lib/trpc/client';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { CategoryForm } from './CategoryForm';
import { useToast } from '@/hooks/use-toast';
import { Edit, Trash2, Plus, FolderOpen } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { CategoryManagerProps } from '@/types/category';



export function CategoryManager({ categories }: CategoryManagerProps) {
  const router = useRouter();
  const { toast } = useToast();
  const [editCategory, setEditCategory] = useState<typeof categories[0] | null>(null);
  const [deleteId, setDeleteId] = useState<number | null>(null);
  const [createDialogOpen, setCreateDialogOpen] = useState(false);

  const deleteMutation = trpc.category.delete.useMutation({
    onSuccess: () => {
      toast({
        title: 'Success',
        description: 'Category deleted successfully',
      });
      router.refresh();
      setDeleteId(null);
    },
    onError: (error) => {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive',
      });
    },
  });

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <p className="text-muted-foreground">
            {categories.length} {categories.length === 1 ? 'category' : 'categories'} total
          </p>
        </div>
        <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="w-4 h-4 mr-2" />
              New Category
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create Category</DialogTitle>
              <DialogDescription>
                Add a new category to organize your posts
              </DialogDescription>
            </DialogHeader>
            <CategoryForm onSuccess={() => setCreateDialogOpen(false)} />
          </DialogContent>
        </Dialog>
      </div>

      {categories.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <FolderOpen className="w-12 h-12 text-muted-foreground mb-4" />
            <p className="text-muted-foreground mb-4">No categories yet</p>
            <Button onClick={() => setCreateDialogOpen(true)}>
              Create Your First Category
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {categories.map((category) => (
            <Card key={category.id}>
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <CardTitle className="text-lg">{category.name}</CardTitle>
                    <Badge variant="outline" className="mt-2 text-xs">
                      /{category.slug}
                    </Badge>
                  </div>
                  <div className="flex gap-1">
                    <Dialog open={editCategory?.id === category.id} onOpenChange={(open) => !open && setEditCategory(null)}>
                      <DialogTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setEditCategory(category)}
                        >
                          <Edit className="w-4 h-4" />
                        </Button>
                      </DialogTrigger>
                      <DialogContent>
                        <DialogHeader>
                          <DialogTitle>Edit Category</DialogTitle>
                          <DialogDescription>
                            Update category information
                          </DialogDescription>
                        </DialogHeader>
                        <CategoryForm
                          category={category}
                          onSuccess={() => setEditCategory(null)}
                        />
                      </DialogContent>
                    </Dialog>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => setDeleteId(category.id)}
                    >
                      <Trash2 className="w-4 h-4 text-destructive" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              {category.description && (
                <CardContent>
                  <CardDescription className="line-clamp-2">
                    {category.description}
                  </CardDescription>
                </CardContent>
              )}
            </Card>
          ))}
        </div>
      )}

      <AlertDialog open={deleteId !== null} onOpenChange={() => setDeleteId(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the category.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={() => deleteId && deleteMutation.mutate({ id: deleteId })}
              className="bg-destructive hover:bg-destructive/90"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
components/dashboard/CategoryForm.tsx:
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { trpc } from '@/lib/trpc/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2 } from 'lucide-react';
import { CategoryFormProps } from '@/types/category';

export function CategoryForm({ category, onSuccess }: CategoryFormProps) {
  const router = useRouter();
  const [name, setName] = useState(category?.name || '');
  const [description, setDescription] = useState(category?.description || '');

  const createCategory = trpc.category.create.useMutation();
  const updateCategory = trpc.category.update.useMutation();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      if (category) {
        await updateCategory.mutateAsync({
          id: category.id,
          name,
          description: description || null,
        });
      } else {
        await createCategory.mutateAsync({
          name,
          description: description || null,
        });
      }
      
      router.refresh();
      onSuccess?.();
    } catch (error) {
      console.error('Error saving category:', error);
    }
  };

  const isLoading = createCategory.isPending || updateCategory.isPending;
  const error = createCategory.error || updateCategory.error;

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && (
        <Alert variant="destructive">
          <AlertDescription>{error.message}</AlertDescription>
        </Alert>
      )}

      <div className="space-y-2">
        <Label htmlFor="name">Name *</Label>
        <Input
          id="name"
          value={name}
          onChange={(e) => setName(e.target.value)}
          placeholder="e.g., Technology, Design..."
          required
          maxLength={50}
          disabled={isLoading}
        />
      </div>

      <div className="space-y-2">
        <Label htmlFor="description">Description</Label>
        <Textarea
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          placeholder="Brief description of this category..."
          rows={3}
          maxLength={200}
          disabled={isLoading}
        />
      </div>

      <div className="flex justify-end gap-2 pt-4">
        <Button
          type="button"
          variant="outline"
          onClick={() => onSuccess?.()}
          disabled={isLoading}
        >
          Cancel
        </Button>
        <Button type="submit" disabled={isLoading}>
          {isLoading && <Loader2 className="w-4 h-4 mr-2 animate-spin" />}
          {category ? 'Update' : 'Create'}
        </Button>
      </div>
    </form>
  );
}

components/common/LoadingSpinner.tsx:
import { Loader2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
  text?: string;
}

export function LoadingSpinner({ size = 'md', className, text }: LoadingSpinnerProps) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12',
  };

  return (
    <div className={cn('flex flex-col items-center justify-center gap-3', className)}>
      <Loader2 className={cn('animate-spin text-primary', sizeClasses[size])} />
      {text && <p className="text-sm text-muted-foreground">{text}</p>}
    </div>
  );
}
components/common/ErrorMessage.tsx:
import { AlertCircle, RefreshCw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

interface ErrorMessageProps {
  title?: string;
  message: string;
  onRetry?: () => void;
  className?: string;
}

export function ErrorMessage({ 
  title = 'Error', 
  message, 
  onRetry,
  className 
}: ErrorMessageProps) {
  return (
    <Alert variant="destructive" className={className}>
      <AlertCircle className="h-4 w-4" />
      <AlertTitle>{title}</AlertTitle>
      <AlertDescription className="mt-2">
        <p>{message}</p>
        {onRetry && (
          <Button 
            variant="outline" 
            size="sm" 
            onClick={onRetry}
            className="mt-3"
          >
            <RefreshCw className="w-4 h-4 mr-2" />
            Try Again
          </Button>
        )}
      </AlertDescription>
    </Alert>
  );
}
components/common/EmptyState.tsx:
import { LucideIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';

interface EmptyStateProps {
  icon: LucideIcon;
  title: string;
  description: string;
  action?: {
    label: string;
    onClick: () => void;
  };
  className?: string;
}

export function EmptyState({ 
  icon: Icon, 
  title, 
  description, 
  action,
  className 
}: EmptyStateProps) {
  return (
    <div className={cn(
      'flex flex-col items-center justify-center py-12 px-4 text-center',
      className
    )}>
      <div className="w-16 h-16 rounded-full bg-secondary flex items-center justify-center mb-4">
        <Icon className="w-8 h-8 text-muted-foreground" />
      </div>
      <h3 className="text-lg font-semibold mb-2">{title}</h3>
      <p className="text-muted-foreground max-w-md mb-6">{description}</p>
      {action && (
        <Button onClick={action.onClick}>
          {action.label}
        </Button>
      )}
    </div>
  );
}
components/blog/PostListSkeleton.tsx:
import { Skeleton } from '@/components/ui/skeleton';
import { Card, CardHeader, CardContent, CardFooter } from '@/components/ui/card';

interface PostListSkeletonProps {
  count?: number;
}

export function PostListSkeleton({ count = 12 }: PostListSkeletonProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {Array.from({ length: count }).map((_, i) => (
        <Card key={i} className="overflow-hidden">
          <Skeleton className="h-56 w-full rounded-t-lg" />
          <CardHeader className="space-y-3">
            <div className="flex gap-2">
              <Skeleton className="h-5 w-16" />
              <Skeleton className="h-5 w-20" />
            </div>
            <Skeleton className="h-6 w-full" />
            <Skeleton className="h-6 w-3/4" />
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-2/3" />
            </div>
          </CardHeader>
          <CardFooter className="border-t pt-4">
            <div className="flex items-center gap-2">
              <Skeleton className="h-8 w-8 rounded-full" />
              <div className="space-y-2">
                <Skeleton className="h-3 w-24" />
                <Skeleton className="h-3 w-32" />
              </div>
            </div>
          </CardFooter>
        </Card>
      ))}
    </div>
  );
}


components/blog/PostList.tsx:

import { Skeleton } from '@/components/ui/skeleton';
import { Card, CardHeader, CardContent, CardFooter } from '@/components/ui/card';

interface PostListSkeletonProps {
  count?: number;
}

export function PostListSkeleton({ count = 12 }: PostListSkeletonProps) {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {Array.from({ length: count }).map((_, i) => (
        <Card key={i} className="overflow-hidden">
          <Skeleton className="h-56 w-full rounded-t-lg" />
          <CardHeader className="space-y-3">
            <div className="flex gap-2">
              <Skeleton className="h-5 w-16" />
              <Skeleton className="h-5 w-20" />
            </div>
            <Skeleton className="h-6 w-full" />
            <Skeleton className="h-6 w-3/4" />
            <div className="space-y-2">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-2/3" />
            </div>
          </CardHeader>
          <CardFooter className="border-t pt-4">
            <div className="flex items-center gap-2">
              <Skeleton className="h-8 w-8 rounded-full" />
              <div className="space-y-2">
                <Skeleton className="h-3 w-24" />
                <Skeleton className="h-3 w-32" />
              </div>
            </div>
          </CardFooter>
        </Card>
      ))}
    </div>
  );
}

components/blog/PostListDetail.tsx:
'use client';

import Image from 'next/image';
import { Badge } from '@/components/ui/badge';
import { formatDistanceToNow } from 'date-fns';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { User, Calendar } from 'lucide-react';

interface PostDetailProps {
  post: {
    id: number;
    title: string;
    content: string;
    excerpt: string | null;
    thumbnail: string | null;
    createdAt: Date;
    author: {
      name: string;
      avatar: string | null;
    };
    postCategories?: Array<{
      category: {
        name: string;
        slug: string;
      };
    }>;
  };
}

export function PostDetail({ post }: PostDetailProps) {
  return (
    <article className="space-y-8">
      {/* Thumbnail */}
      {post.thumbnail && (
        <div className="relative w-full h-[400px] rounded-xl overflow-hidden">
          <Image
            src={post.thumbnail}
            alt={post.title}
            fill
            className="object-cover"
            priority
          />
        </div>
      )}

      {/* Categories */}
      {post.postCategories && post.postCategories.length > 0 && (
        <div className="flex flex-wrap gap-2">
          {post.postCategories.map((pc) => (
            <Badge key={pc.category.slug} variant="secondary">
              {pc.category.name}
            </Badge>
          ))}
        </div>
      )}

      {/* Title */}
      <h1 className="text-5xl font-bold leading-tight">
        {post.title}
      </h1>

      {/* Excerpt */}
      {post.excerpt && (
        <p className="text-xl text-muted-foreground">
          {post.excerpt}
        </p>
      )}

      {/* Meta Info */}
      <div className="flex items-center gap-6 pb-8 border-b">
        <div className="flex items-center gap-2">
          {post.author.avatar ? (
            <Image
              src={post.author.avatar}
              alt={post.author.name}
              width={40}
              height={40}
              className="rounded-full"
            />
          ) : (
            <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center">
              <User className="w-5 h-5" />
            </div>
          )}
          <span className="font-medium">{post.author.name}</span>
        </div>
        <div className="flex items-center gap-2 text-muted-foreground">
          <Calendar className="w-5 h-5" />
          <span>
            {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
          </span>
        </div>
      </div>

      {/* Content */}
      <div className="prose prose-lg dark:prose-invert max-w-none">
        <ReactMarkdown remarkPlugins={[remarkGfm]}>
          {post.content}
        </ReactMarkdown>
      </div>
    </article>
  );
}
components/blog/PostCard.tsx:
'use client';

import Link from 'next/link';
import Image from 'next/image';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { formatDistanceToNow } from 'date-fns';
import { Clock, TrendingUp } from 'lucide-react';

interface PostCardProps {
  post: {
    id: number;
    title: string;
    slug: string;
    excerpt?: string | null;
    thumbnail?: string | null;
    createdAt: Date;
    author: {
      name: string;
      avatar?: string | null;
    };
    postCategories?: Array<{
      category: {
        name: string;
        slug: string;
      };
    }>;
  };
}

export function PostCard({ post }: PostCardProps) {
  return (
    <Card className="h-full hover:shadow-2xl hover:-translate-y-1 transition-all duration-300 overflow-hidden group border border-border/50 bg-card">
      {/* Thumbnail Section */}
      <Link href={`/blog/${post.slug}`}>
        <div className="relative w-full h-56 overflow-hidden bg-gradient-to-br from-muted to-muted/50">
          {post.thumbnail ? (
            <Image
              src={post.thumbnail}
              alt={post.title}
              fill
              className="object-cover group-hover:scale-110 transition-transform duration-500 ease-out"
            />
          ) : (
            <div className="w-full h-full bg-gradient-to-br from-primary/10 to-primary/5 flex items-center justify-center">
              <TrendingUp className="w-16 h-16 text-primary/20" />
            </div>
          )}
          
          {/* Overlay on hover */}
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        </div>
      </Link>

      <CardHeader className="space-y-3 pb-3">
        {/* Categories */}
        {post.postCategories && post.postCategories.length > 0 && (
          <div className="flex flex-wrap items-center gap-2">
            {post.postCategories.slice(0, 2).map((pc) => (
              <Badge 
                key={pc.category.slug} 
                variant="secondary" 
                className="text-xs font-medium hover:bg-primary/20 transition-colors"
              >
                {pc.category.name}
              </Badge>
            ))}
            {post.postCategories.length > 2 && (
              <Badge variant="outline" className="text-xs">
                +{post.postCategories.length - 2}
              </Badge>
            )}
          </div>
        )}

        {/* Title */}
        <CardTitle className="line-clamp-2 leading-snug text-xl">
          <Link 
            href={`/blog/${post.slug}`}
            className="hover:text-primary transition-colors duration-200"
          >
            {post.title}
          </Link>
        </CardTitle>

        {/* Excerpt */}
        {post.excerpt && (
          <CardDescription className="line-clamp-3 text-sm leading-relaxed">
            {post.excerpt}
          </CardDescription>
        )}
      </CardHeader>

      <CardFooter className="pt-0 flex items-center justify-between border-t border-border/50 mt-4 pt-4">
        {/* Author Info */}
        <div className="flex items-center gap-2">
          <Avatar className="w-8 h-8 border-2 border-border">
            <AvatarImage src={post.author.avatar || undefined} />
            <AvatarFallback className="text-xs bg-primary/10">
              {post.author.name.charAt(0).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <div className="flex flex-col">
            <span className="text-xs font-medium text-foreground">{post.author.name}</span>
            <span className="text-xs text-muted-foreground flex items-center gap-1">
              <Clock className="w-3 h-3" />
              {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
            </span>
          </div>
        </div>
      </CardFooter>
    </Card>
  );
}
components/blog/Pagination.tsx:
'use client';

import { Button } from '@/components/ui/button';
import { useRouter, useSearchParams } from 'next/navigation';
import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from 'lucide-react';
import { useTransition } from 'react';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  categorySlug?: string;
}

export function Pagination({ currentPage, totalPages, categorySlug }: PaginationProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isPending, startTransition] = useTransition();

  const navigate = (page: number) => {
    startTransition(() => {
      const params = new URLSearchParams(searchParams.toString());
      
      if (page === 1) {
        params.delete('page');
      } else {
        params.set('page', page.toString());
      }

      const queryString = params.toString();
      router.push(`/blog${queryString ? `?${queryString}` : ''}`);
      
      // Smooth scroll to top
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  };

  const generatePageNumbers = () => {
    const pages: (number | string)[] = [];
    const showEllipsis = totalPages > 7;

    if (!showEllipsis) {
      // Show all pages if 7 or fewer
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      // Always show first page
      pages.push(1);

      if (currentPage <= 3) {
        // Near the start
        pages.push(2, 3, 4, '...', totalPages);
      } else if (currentPage >= totalPages - 2) {
        // Near the end
        pages.push('...', totalPages - 3, totalPages - 2, totalPages - 1, totalPages);
      } else {
        // Somewhere in the middle
        pages.push('...', currentPage - 1, currentPage, currentPage + 1, '...', totalPages);
      }
    }

    return pages;
  };

  const pageNumbers = generatePageNumbers();

  return (
    <div className="flex items-center gap-2">
      {/* First Page Button */}
      <Button
        variant="outline"
        size="icon"
        onClick={() => navigate(1)}
        disabled={currentPage === 1 || isPending}
        className="hidden sm:flex"
      >
        <ChevronsLeft className="w-4 h-4" />
      </Button>

      {/* Previous Page Button */}
      <Button
        variant="outline"
        size="icon"
        onClick={() => navigate(currentPage - 1)}
        disabled={currentPage === 1 || isPending}
      >
        <ChevronLeft className="w-4 h-4" />
      </Button>

      {/* Page Numbers */}
      <div className="flex items-center gap-1">
        {pageNumbers.map((page, index) => {
          if (page === '...') {
            return (
              <span key={`ellipsis-${index}`} className="px-3 py-2 text-muted-foreground">
                ...
              </span>
            );
          }

          const pageNum = page as number;
          const isActive = pageNum === currentPage;

          return (
            <Button
              key={pageNum}
              variant={isActive ? 'default' : 'outline'}
              size="icon"
              onClick={() => navigate(pageNum)}
              disabled={isPending}
              className={`min-w-[40px] transition-all ${
                isActive ? 'scale-110' : 'hover:scale-105'
              }`}
            >
              {pageNum}
            </Button>
          );
        })}
      </div>

      {/* Next Page Button */}
      <Button
        variant="outline"
        size="icon"
        onClick={() => navigate(currentPage + 1)}
        disabled={currentPage === totalPages || isPending}
      >
        <ChevronRight className="w-4 h-4" />
      </Button>

      {/* Last Page Button */}
      <Button
        variant="outline"
        size="icon"
        onClick={() => navigate(totalPages)}
        disabled={currentPage === totalPages || isPending}
        className="hidden sm:flex"
      >
        <ChevronsRight className="w-4 h-4" />
      </Button>

      {/* Loading Indicator */}
      {isPending && (
        <div className="ml-2">
          <div className="w-5 h-5 border-2 border-primary border-t-transparent rounded-full animate-spin" />
        </div>
      )}
    </div>
  );
}
components/blog/FeaturedSection.tsx:
import { FeaturedPost } from './FeaturedPost';
import { PostCard } from './PostCard';

interface Post {
  id: number;
  title: string;
  slug: string;
  excerpt?: string | null;
  thumbnail?: string | null;
  createdAt: Date;
  author: {
    name: string;
    avatar?: string | null;
  };
  postCategories?: Array<{
    category: {
      name: string;
      slug: string;
    };
  }>;
}

interface FeaturedSectionProps {
  featuredPost: Post;
  recentPosts: Post[];
}

export function FeaturedSection({ featuredPost, recentPosts }: FeaturedSectionProps) {
  return (
    <div className="mb-16 space-y-16 animate-in fade-in duration-700">
      {/* Featured Hero Post */}
      <div>
        <FeaturedPost post={featuredPost} />
      </div>

      {/* Recent Posts Section */}
      {recentPosts.length > 0 && (
        <div>
          <div className="flex items-center justify-between mb-8">
            <div>
              <h2 className="text-3xl font-bold tracking-tight">Recent Articles</h2>
              <p className="text-muted-foreground mt-1">Fresh content just for you</p>
            </div>
            <div className="h-px flex-1 bg-gradient-to-r from-border to-transparent ml-8" />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {recentPosts.map((post) => (
              <PostCard key={post.id} post={post} />
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
components/blog/featuredPost.tsx:
'use client';

import Link from 'next/link';
import Image from 'next/image';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { formatDistanceToNow } from 'date-fns';
import { User, Calendar, ArrowRight, Clock } from 'lucide-react';

interface FeaturedPostProps {
  post: {
    id: number;
    title: string;
    slug: string;
    excerpt?: string | null;
    thumbnail?: string | null;
    createdAt: Date;
    author: {
      name: string;
      avatar?: string | null;
    };
    postCategories?: Array<{
      category: {
        name: string;
        slug: string;
      };
    }>;
  };
}

export function FeaturedPost({ post }: FeaturedPostProps) {
  return (
    <div className="relative rounded-2xl overflow-hidden shadow-2xl group border border-border/50">
      {/* Hero Image */}
      <div className="relative w-full h-[600px] bg-gradient-to-br from-muted to-muted/50">
        {post.thumbnail ? (
          <Image
            src={post.thumbnail}
            alt={post.title}
            fill
            className="object-cover group-hover:scale-105 transition-transform duration-700 ease-out"
            priority
          />
        ) : (
          <div className="w-full h-full bg-gradient-to-br from-primary/20 via-primary/10 to-primary/5 flex items-center justify-center">
            <div className="text-8xl font-bold text-primary/20">FEATURED</div>
          </div>
        )}
        
        {/* Sophisticated Gradient Overlay */}
        <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent" />
        
        {/* Accent Border Effect */}
        <div className="absolute inset-0 ring-1 ring-inset ring-white/10" />
      </div>

      {/* Content Overlay */}
      <div className="absolute bottom-0 left-0 right-0 p-8 md:p-12 text-white">
        <div className="max-w-4xl">
          {/* Featured Badge */}
          <div className="inline-flex items-center gap-2 px-3 py-1 rounded-full bg-primary text-primary-foreground text-xs font-semibold mb-6 animate-pulse">
            ⭐ Featured Article
          </div>

          {/* Categories */}
          {post.postCategories && post.postCategories.length > 0 && (
            <div className="flex flex-wrap items-center gap-2 mb-6">
              {post.postCategories.slice(0, 3).map((pc) => (
                <Badge 
                  key={pc.category.slug} 
                  variant="secondary" 
                  className="bg-white/15 backdrop-blur-md text-white border-white/20 hover:bg-white/25 transition-colors"
                >
                  {pc.category.name}
                </Badge>
              ))}
            </div>
          )}

          {/* Title */}
          <h2 className="text-4xl md:text-6xl font-bold mb-6 leading-tight">
            <Link 
              href={`/blog/${post.slug}`}
              className="hover:text-primary transition-colors duration-300 bg-gradient-to-r from-white to-gray-200 bg-clip-text hover:from-primary hover:to-primary/80"
            >
              {post.title}
            </Link>
          </h2>

          {/* Excerpt */}
          {post.excerpt && (
            <p className="text-lg md:text-xl text-gray-200 mb-8 line-clamp-2 max-w-3xl leading-relaxed">
              {post.excerpt}
            </p>
          )}

          {/* Meta Info & CTA */}
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-6">
            <div className="flex items-center gap-6 text-sm text-gray-300">
              <div className="flex items-center gap-2">
                <User className="w-4 h-4" />
                <span className="font-medium">{post.author.name}</span>
              </div>
              <div className="flex items-center gap-2">
                <Calendar className="w-4 h-4" />
                <span>
                  {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
                </span>
              </div>
              <div className="flex items-center gap-2">
                <Clock className="w-4 h-4" />
                <span>5 min read</span>
              </div>
            </div>

            {/* CTA Button */}
            <Link href={`/blog/${post.slug}`}>
              <Button 
                size="lg"
                className="group/btn bg-white text-black hover:bg-white/90 font-semibold shadow-lg"
              >
                Read Full Story
                <ArrowRight className="w-5 h-5 ml-2 group-hover/btn:translate-x-1 transition-transform" />
              </Button>
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}
components/blog/CategoryFilter.tsx:
'use client';

import { Badge } from '@/components/ui/badge';
import { CategoryFilterProps } from '@/types/category';
import { useRouter, useSearchParams } from 'next/navigation';
import { Filter } from 'lucide-react';
import { useTransition } from 'react';

export function CategoryFilter({ categories }: CategoryFilterProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const currentCategory = searchParams.get('category');
  const [isPending, startTransition] = useTransition();

  const handleCategoryClick = (slug: string | null) => {
    startTransition(() => {
      const params = new URLSearchParams(searchParams.toString());
      
      if (slug === null || currentCategory === slug) {
        // Clear category filter and reset to page 1
        params.delete('category');
        params.delete('page');
        router.push('/blog');
      } else {
        // Set new category and reset to page 1
        params.set('category', slug);
        params.delete('page'); // Reset pagination when changing category
        router.push(`/blog?${params.toString()}`);
      }
    });
  };

  return (
    <div className="flex items-center gap-3 flex-wrap">
      <div className="flex items-center gap-2 text-sm font-medium text-muted-foreground">
        <Filter className="w-4 h-4" />
        <span className="hidden sm:inline">Filter:</span>
      </div>
      
      <Badge
        variant={!currentCategory ? 'default' : 'outline'}
        className={`cursor-pointer px-4 py-2 transition-all duration-200 ${
          isPending ? 'opacity-50' : 'hover:scale-105'
        }`}
        onClick={() => handleCategoryClick(null)}
      >
        All Posts
      </Badge>
      
      {categories.map((category) => (
        <Badge
          key={category.id}
          variant={currentCategory === category.slug ? 'default' : 'outline'}
          className={`cursor-pointer px-4 py-2 transition-all duration-200 ${
            isPending ? 'opacity-50' : 'hover:scale-105'
          }`}
          onClick={() => handleCategoryClick(category.slug)}
        >
          {category.name}
        </Badge>
      ))}
      
      {isPending && (
        <div className="ml-2">
          <div className="w-4 h-4 border-2 border-primary border-t-transparent rounded-full animate-spin" />
        </div>
      )}
    </div>
  );
}
components/blog/CategoryBadge.tsx:
import { Badge } from '@/components/ui/badge';
import Link from 'next/link';

interface CategoryBadgeProps {
  name: string;
  slug: string;
  variant?: 'default' | 'secondary' | 'outline';
  clickable?: boolean;
}

export function CategoryBadge({ 
  name, 
  slug, 
  variant = 'secondary',
  clickable = true 
}: CategoryBadgeProps) {
  if (clickable) {
    return (
      <Link href={`/blog?category=${slug}`}>
        <Badge 
          variant={variant}
          className="cursor-pointer hover:bg-primary/20 transition-colors"
        >
          {name}
        </Badge>
      </Link>
    );
  }

  return <Badge variant={variant}>{name}</Badge>;
}
app/page.tsx:
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowRight, BookOpen, Edit3, Layout, Sparkles } from 'lucide-react';

export default function HomePage() {
  return (
    <div className="flex flex-col min-h-screen">
      {/* Hero Section */}
      <section className="flex-1 flex items-center justify-center bg-linear-to-b from-background to-secondary/20 px-4 py-20 md:py-32">
        <div className="container max-w-6xl text-center space-y-8">
          <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 text-primary text-sm font-medium mb-4">
            <Sparkles className="w-4 h-4" />
            <span>Modern Blogging Platform</span>
          </div>
          
          <h1 className="text-4xl md:text-6xl lg:text-7xl font-bold tracking-tight">
            Share Your Stories,
            <br />
            <span className="text-primary">Inspire the World</span>
          </h1>
          
          <p className="text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto">
            A powerful, modern blogging platform built with Next.js, tRPC, and Drizzle ORM. 
            Create, manage, and share your content with ease.
          </p>
          
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
            <Button size="lg" asChild className="min-w-[200px]">
              <Link href="/blog">
                Explore Blog
                <ArrowRight className="ml-2 w-4 h-4" />
              </Link>
            </Button>
            <Button size="lg" variant="outline" asChild className="min-w-[200px]">
              <Link href="/dashboard">
                Go to Dashboard
              </Link>
            </Button>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-20 px-4 bg-background">
        <div className="container max-w-6xl">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold mb-4">
              Everything You Need
            </h2>
            <p className="text-muted-foreground text-lg max-w-2xl mx-auto">
              Built with modern technologies and best practices for a seamless experience
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Card>
              <CardHeader>
                <div className="w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4">
                  <Edit3 className="w-6 h-6 text-primary" />
                </div>
                <CardTitle>Markdown Editor</CardTitle>
                <CardDescription>
                  Write with powerful markdown support and live preview
                </CardDescription>
              </CardHeader>
            </Card>

            <Card>
              <CardHeader>
                <div className="w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4">
                  <Layout className="w-6 h-6 text-primary" />
                </div>
                <CardTitle>Category Management</CardTitle>
                <CardDescription>
                  Organize your posts with flexible category system
                </CardDescription>
              </CardHeader>
            </Card>

            <Card>
              <CardHeader>
                <div className="w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4">
                  <BookOpen className="w-6 h-6 text-primary" />
                </div>
                <CardTitle>Beautiful Reading</CardTitle>
                <CardDescription>
                  Optimized reading experience with responsive design
                </CardDescription>
              </CardHeader>
            </Card>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 px-4 bg-primary text-primary-foreground">
        <div className="container max-w-4xl text-center space-y-6">
          <h2 className="text-3xl md:text-4xl font-bold">
            Ready to Start Writing?
          </h2>
          <p className="text-lg opacity-90">
            Join our platform and share your knowledge with the world
          </p>
          <Button size="lg" variant="secondary" asChild>
            <Link href="/dashboard/posts/new">
              Create Your First Post
              <ArrowRight className="ml-2 w-4 h-4" />
            </Link>
          </Button>
        </div>
      </section>
    </div>
  );
}
app/layout.tsx:
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { TRPCProvider } from "@/lib/trpc/Provider";
import { Header } from "@/components/layout/Header";
import { Footer } from "@/components/layout/Footer";
import { ClientUIWrapper } from "@/components/providers/ClientUIWrapper";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Nexus - Modern Blogging Platform",
  description: "A powerful blogging platform built with Next.js, tRPC, and Drizzle ORM",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <TRPCProvider>
          {/* 🧩 Wrap your whole UI here */}
          <ClientUIWrapper>
            <div className="flex flex-col min-h-screen">
              <Header />
              <main className="flex-1">{children}</main>
              <Footer />
            </div>
          </ClientUIWrapper>
        </TRPCProvider>
      </body>
    </html>
  );
}
app/globals.css:
@import "tailwindcss";
@import "uploadthing/tw/v4";
@source "../node_modules/@uploadthing/react/dist"; 
@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 217.2 91.2% 59.8%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 224.3 76.3% 48%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
  html {
    @apply scroll-smooth;
  }
}

/* Custom utilities */
@layer utilities {
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

/* Prose styles for markdown content */
@layer components {
  .prose h1 {
    @apply text-4xl font-bold mt-8 mb-4;
  }

  .prose h2 {
    @apply text-3xl font-bold mt-6 mb-3;
  }

  .prose h3 {
    @apply text-2xl font-bold mt-4 mb-2;
  }

  .prose p {
    @apply mb-4 leading-relaxed;
  }

  .prose ul {
    @apply list-disc list-inside mb-4;
  }

  .prose ol {
    @apply list-decimal list-inside mb-4;
  }

  .prose li {
    @apply mb-2;
  }

  .prose a {
    @apply text-primary hover:underline;
  }

  .prose code {
    @apply bg-muted px-1.5 py-0.5 rounded text-sm font-mono;
  }

  .prose pre {
    @apply bg-muted p-4 rounded-lg overflow-x-auto mb-4;
  }

  .prose pre code {
    @apply bg-transparent p-0;
  }

  .prose blockquote {
    @apply border-l-4 border-primary pl-4 italic my-4;
  }

  .prose img {
    @apply rounded-lg my-4;
  }

  .prose table {
    @apply w-full border-collapse mb-4;
  }

  .prose th {
    @apply bg-muted p-2 text-left font-semibold;
  }

  .prose td {
    @apply border border-border p-2;
  }
}
app/dashboard/page.tsx:

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { FileText, FolderOpen, Eye, PenSquare, TrendingUp } from 'lucide-react';
import { trpc } from '@/lib/trpc/server';

export default async function DashboardPage() {
  const { posts } = await trpc.post.getAll({}); 
  const categories = await trpc.category.getAll();

  const publishedPosts = posts.filter(p => p.published);
  const draftPosts = posts.filter(p => !p.published);

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-4xl font-bold mb-2">Dashboard</h1>
        <p className="text-muted-foreground">
          Welcome back! Here's an overview of your blog.
        </p>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">
              Total Posts
            </CardTitle>
            <FileText className="w-4 h-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">{posts.length}</div>
            <p className="text-xs text-muted-foreground mt-1">
              All posts in database
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">
              Published
            </CardTitle>
            <Eye className="w-4 h-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-green-600">
              {publishedPosts.length}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              Live on your blog
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">
              Drafts
            </CardTitle>
            <PenSquare className="w-4 h-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-orange-600">
              {draftPosts.length}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              Work in progress
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">
              Categories
            </CardTitle>
            <FolderOpen className="w-4 h-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold">{categories.length}</div>
            <p className="text-xs text-muted-foreground mt-1">
              Content organized
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>Common tasks and shortcuts</CardDescription>
          </CardHeader>
          <CardContent className="space-y-2">
            <Button asChild className="w-full justify-start">
              <Link href="/dashboard/posts/new">
                <PenSquare className="w-4 h-4 mr-2" />
                Create New Post
              </Link>
            </Button>
            <Button asChild variant="outline" className="w-full justify-start">
              <Link href="/dashboard/posts">
                <FileText className="w-4 h-4 mr-2" />
                Manage Posts
              </Link>
            </Button>
            <Button asChild variant="outline" className="w-full justify-start">
              <Link href="/dashboard/categories">
                <FolderOpen className="w-4 h-4 mr-2" />
                Manage Categories
              </Link>
            </Button>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Recent Activity</CardTitle>
            <CardDescription>Your latest blog updates</CardDescription>
          </CardHeader>
          <CardContent>
            {posts.length === 0 ? (
              <p className="text-sm text-muted-foreground py-4">
                No posts yet. Create your first post to get started!
              </p>
            ) : (
              <div className="space-y-3">
                {posts.slice(0, 5).map((post) => (
                  <div key={post.id} className="flex items-start gap-3 text-sm">
                    <div className="w-2 h-2 rounded-full bg-primary mt-1.5" />
                    <div className="flex-1 min-w-0">
                      <p className="font-medium truncate">{post.title}</p>
                      <p className="text-xs text-muted-foreground">
                        {post.published ? 'Published' : 'Draft'} • {new Date(post.createdAt).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
app/dashboard/layout.tsx:
import { DashboardSidebar } from '@/components/dashboard/DashboardSidebar';

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="flex min-h-screen">
      <DashboardSidebar />
      <main className="flex-1 lg:ml-64">
        <div className="container max-w-7xl mx-auto px-4 py-8">
          {children}
        </div>
      </main>
    </div>
  );
}
app/dashboard/posts/page.tsx:
import { trpc } from '@/lib/trpc/server';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { PenSquare } from 'lucide-react';
import { PostTable } from '@/components/dashboard/PostTable';

export default async function PostsManagementPage() {
  const posts = await trpc.post.getAll({});

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Posts</h1>
          <p className="text-muted-foreground">
            Manage your blog posts
          </p>
        </div>
        <Button asChild>
          <Link href="/dashboard/posts/new">
            <PenSquare className="w-4 h-4 mr-2" />
            New Post
          </Link>
        </Button>
      </div>

      <PostTable posts={posts} />
    </div>
  );
}
app/dashboard/posts/new/page.tsx:
import { PostForm } from '@/components/dashboard/PostForm';
import { trpc } from '@/lib/trpc/server';

export default async function NewPostPage() {
  const categories = await trpc.category.getAll();

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Create New Post</h1>
        <p className="text-muted-foreground">
          Write and publish your next blog post
        </p>
      </div>

      <PostForm categories={categories} />
    </div>
  );
}
app/dashboard/posts/[slug]/edit/page.tsx:
import { trpc } from '@/lib/trpc/server';
import { PostForm } from '@/components/dashboard/PostForm';
import { notFound } from 'next/navigation';
import type { EditPostPageProps } from '@/types/post';



export default async function EditPostPage({ params }: EditPostPageProps) {
  const { slug } = await params;  

  try {
    const post = await trpc.post.getBySlug({ slug }); 
    const categories = await trpc.category.getAll();

    return (
      <div className="space-y-6">
        <div>
          <h1 className="text-3xl font-bold">Edit Post</h1>
          <p className="text-muted-foreground">
            Update your blog post
          </p>
        </div>

        <PostForm post={post} categories={categories} />
      </div>
    );
  } catch (error) {
    notFound();
  }
}
app/dashboard/categories/page.tsx:
import { CategoryManager } from '@/components/dashboard/CategoryManager';
import { trpc } from '@/lib/trpc/server';

export default async function CategoriesPage() {
  const categories = await trpc.category.getAll();

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Categories</h1>
        <p className="text-muted-foreground">
          Organize your blog content
        </p>
      </div>

      <CategoryManager categories={categories} />
    </div>
  );
}
app/blog/page.tsx:
import { trpc } from '@/lib/trpc/server';
import { PostList } from '@/components/blog/PostList';
import { CategoryFilter } from '@/components/blog/CategoryFilter';
import { FeaturedSection } from '@/components/blog/FeaturedSection';
import { Pagination } from '@/components/blog/Pagination';
import { Sparkles } from 'lucide-react';
import { Suspense } from 'react';
import { PostListSkeleton } from '@/components/blog/PostListSkeleton';

interface BlogPageProps {
  searchParams: Promise<{ 
    category?: string;
    page?: string;
  }>; 
}

export default async function BlogPage({ searchParams }: BlogPageProps) {
  const params = await searchParams;
  const currentPage = Number(params.page) || 1;
  const categorySlug = params.category;
  
  // Fetch categories
  const categories = await trpc.category.getAll();

  // Determine if we should show featured section
  const showFeatured = !categorySlug && currentPage === 1;

  // Fetch paginated posts
  const { posts, pagination } = await trpc.post.getAll({
    published: true,
    categorySlug,
    page: currentPage,
    limit: 12, // Adjust based on your needs
  });

  // Fetch featured posts only if needed
  const featuredPosts = showFeatured 
    ? await trpc.post.getFeatured({ count: 4 })
    : [];

  const [featuredPost, ...recentPosts] = featuredPosts;

  return (
    <div className="min-h-screen bg-gradient-to-b from-background via-background to-muted/20">
      {/* Hero Header */}
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-grid-pattern opacity-5" />
        <div className="container mx-auto px-4 pt-16 pb-8 relative">
          <div className="max-w-3xl mx-auto text-center space-y-4">
            <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 text-primary text-sm font-medium mb-4">
              <Sparkles className="w-4 h-4" />
              <span>Latest Insights & Stories</span>
            </div>
            <h1 className="text-5xl md:text-6xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-foreground to-foreground/70">
              Discover Our Blog
            </h1>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed">
              Dive into expert insights, tutorials, and stories that inspire innovation
            </p>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 pb-20">
        {/* Category Filter */}
        <div className="mb-12 flex justify-center">
          <div className="inline-block p-1 bg-muted/50 rounded-lg backdrop-blur-sm">
            <CategoryFilter categories={categories} />
          </div>
        </div>

        {/* Featured Section - Only show on first page without filters */}
        {showFeatured && featuredPost && (
          <FeaturedSection 
            featuredPost={featuredPost}
            recentPosts={recentPosts}
          />
        )}

        {/* Main Post Grid with Pagination */}
        <div className="space-y-8">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-3xl font-bold tracking-tight">
                {categorySlug ? 'Filtered Posts' : showFeatured ? 'More Articles' : 'All Posts'}
              </h2>
              <p className="text-muted-foreground mt-1">
                {pagination.total} {pagination.total === 1 ? 'post' : 'posts'} found
              </p>
            </div>
            <div className="h-px flex-1 bg-gradient-to-r from-border to-transparent ml-8" />
          </div>

          <Suspense fallback={<PostListSkeleton count={12} />}>
            <PostList posts={posts} />
          </Suspense>

          {/* Pagination Component */}
          {pagination.totalPages > 1 && (
            <div className="flex justify-center pt-8">
              <Pagination
                currentPage={pagination.page}
                totalPages={pagination.totalPages}
                categorySlug={categorySlug}
              />
            </div>
          )}

          {/* Empty State */}
          {posts.length === 0 && (
            <div className="text-center py-20">
              <div className="text-6xl mb-4">📭</div>
              <h3 className="text-2xl font-bold mb-2">No posts found</h3>
              <p className="text-muted-foreground mb-6">
                {categorySlug 
                  ? "Try selecting a different category or view all posts" 
                  : "Check back soon for new content"}
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
app/blog/[slug]/page.tsx:
import { trpc } from '@/lib/trpc/server';
import { notFound } from 'next/navigation';
import Image from 'next/image';
import { Badge } from '@/components/ui/badge';
import { formatDistanceToNow } from 'date-fns';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { User, Calendar } from 'lucide-react';
import { PostPageProps } from '@/types/post';



export default async function PostPage({ params }: PostPageProps) {
  try {
    const { slug } = await params;
    const post = await trpc.post.getBySlug({ slug }); 

    return (
      <article className="container mx-auto px-4 py-12 max-w-4xl">
        {/* Thumbnail */}
        {post.thumbnail && (
          <div className="relative w-full h-[400px] rounded-xl overflow-hidden mb-8">
            <Image
              src={post.thumbnail}
              alt={post.title}
              fill
              className="object-cover"
              priority
            />
          </div>
        )}

        {/* Categories */}
        {post.postCategories && post.postCategories.length > 0 && (
          <div className="flex flex-wrap gap-2 mb-4">
            {post.postCategories.map((pc) => (
              <Badge key={pc.category.slug} variant="secondary">
                {pc.category.name}
              </Badge>
            ))}
          </div>
        )}

        {/* Title */}
        <h1 className="text-5xl font-bold mb-6 leading-tight">
          {post.title}
        </h1>

        {/* Excerpt */}
        {post.excerpt && (
          <p className="text-xl text-muted-foreground mb-8">
            {post.excerpt}
          </p>
        )}

        {/* Meta Info */}
        <div className="flex items-center gap-6 mb-8 pb-8 border-b">
          <div className="flex items-center gap-2">
            <User className="w-5 h-5" />
            <span className="font-medium">{post.author.name}</span>
          </div>
          <div className="flex items-center gap-2">
            <Calendar className="w-5 h-5" />
            <span>
              {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}
            </span>
          </div>
        </div>

        {/* Content */}
        <div className="prose prose-lg dark:prose-invert max-w-none">
          <ReactMarkdown remarkPlugins={[remarkGfm]}>
            {post.content}
          </ReactMarkdown>
        </div>
      </article>
    );
  } catch (error) {
    notFound();
  }
}
app/api/trpc/[trpc]/route.ts:
import { fetchRequestHandler } from '@trpc/server/adapters/fetch';
import { type NextRequest } from 'next/server';
import { appRouter } from '@/server/api/root';
import { createTRPCContext } from '@/server/api/trpc';

const handler = (req: NextRequest) =>
  fetchRequestHandler({
    endpoint: '/api/trpc',
    req,
    router: appRouter,
    createContext: () => createTRPCContext({ headers: req.headers }),
    onError:
      process.env.NODE_ENV === 'development'
        ? ({ path, error }) => {
            console.error(
              `❌ tRPC failed on ${path ?? '<no-path>'}: ${error.message}`
            );
          }
        : undefined,
  });

export { handler as GET, handler as POST };